<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="troubleshooting" revision="1">
  <title>Troubleshooting</title>

  <sect1>
    <title>Insufficient type arguments</title>

    <para>
      Querydsl needs properly encoded List Set, Collection and Map properties in all code generation
      scenarios.
    </para>

    <para>When using improperly encoded fields or getters you might the following
      stacktrace:</para>

    <programlisting><![CDATA[
java.lang.RuntimeException: Caught exception for field com.querydsl.jdo.testdomain.Store#products
  at com.querydsl.apt.Processor$2.visitType(Processor.java:117)
  at com.querydsl.apt.Processor$2.visitType(Processor.java:80)
  at com.sun.tools.javac.code.Symbol$ClassSymbol.accept(Symbol.java:827)
  at com.querydsl.apt.Processor.getClassModel(Processor.java:154)
  at com.querydsl.apt.Processor.process(Processor.java:191)
  ...
Caused by: java.lang.IllegalArgumentException: Insufficient type arguments for List
  at com.querydsl.apt.APTTypeModel.visitDeclared(APTTypeModel.java:112)
  at com.querydsl.apt.APTTypeModel.visitDeclared(APTTypeModel.java:40)
  at com.sun.tools.javac.code.Type$ClassType.accept(Type.java:696)
  at com.querydsl.apt.APTTypeModel.<init>(APTTypeModel.java:55)
  at com.querydsl.apt.APTTypeModel.get(APTTypeModel.java:48)
  at com.querydsl.apt.Processor$2.visitType(Processor.java:114)
  ... 35 more
]]></programlisting>

    <para>
      Examples of problematic field declarations and their corrections:
    </para>

    <programlisting language="java"><![CDATA[
    private Collection names; // WRONG

    private Collection<String> names; // RIGHT

    private Map employeesByName; // WRONG

    private Map<String,Employee> employeesByName; // RIGHT
]]></programlisting>


  </sect1>

  <sect1>

    <title>Multithreaded initialization of Querydsl Q-types</title>

    <para>When Querydsl Q-types are initialized from multiple threads, deadlocks can
      occur, if the Q-types have circular dependencies.</para>

    <para>An easy to use solution is to initialize the classes in a single thread before
      they are used in different threads.</para>

    <para>The com.querydsl.codegen.ClassPathUtils class can be used for that like this:</para>

    <programlisting language="java"><![CDATA[
    ClassPathUtils.scanPackage(Thread.currentThread().getContextClassLoader(), packageToLoad);
]]></programlisting>

    <para>Replace packageToLoad with the package of the classes you want to initialize.
    </para>

  </sect1>

</chapter>

